# -*- coding: utf-8 -*-
"""Case COVID.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YdK2oXH_pfHFHAlDqhDgj_xoILoFee9P

# **Introdução ao Projeto: Análise dos Dados da PNAD COVID19 de 2020**
A Pesquisa Nacional por Amostra de Domicílios (PNAD) COVID19, conduzida pelo IBGE em 2020, foi uma iniciativa pioneira para mensurar os impactos sociais e econômicos causados pela pandemia no Brasil. Este projeto utiliza os dados públicos dessa pesquisa com o objetivo de extrair informações relevantes para subsidiar a compreensão de padrões e tendências que emergiram durante o período crítico da pandemia.

# Objetivo do Projeto
O objetivo principal é transformar os dados brutos da PNAD COVID19 em insights claros e acessíveis, que possam ser apresentados de maneira objetiva para um público não técnico. Para isso, adotaremos as seguintes etapas:

**Período de Análise:**

Seleção de pelo menos 5 meses consecutivos dentro do ano de 2020.

**Seleção de Variáveis:**

Foi escolhidas 15 questões da pesquisa que ofereçam um panorama amplo e diversificado sobre os temas relacionados à COVID-19, como saúde, renda, trabalho e acesso a serviços de saúde.

**Modelagem e Organização dos Dados:**

Ferramentas utilizadas: SQL e Python.
Os dados serão tratados, organizados e modelados para facilitar análises posteriores.
Python será usado para pré-processamento de dados, criação de análises estatísticas e automatização de processos, enquanto o SQL será utilizado para consultas e organização dos dados.
Comentários serão incluídos em cada passo do código para documentar o processo e garantir a reprodutibilidade.

**Análise Descritiva e Geração de Insights:**

Será realizada uma análise descritiva detalhada para identificar padrões, tendências e relações entre as variáveis escolhidas.
Python será usado para visualização gráfica e geração de insights a partir de bibliotecas como Pandas, Matplotlib e Seaborn.

**Visualização dos Resultados:**

Ferramentas utilizadas: Power BI e Python.
Dashboards interativos serão criados no Power BI para apresentar os resultados de forma visualmente atrativa e compreensível.
Python poderá ser utilizado para criar gráficos complementares e realizar análises adicionais de visualização.

**Apresentação Final:**

Todos os resultados serão compilados em uma apresentação voltada para um público não técnico.
O foco será a clareza e a ênfase nos insights práticos, traduzindo os resultados em informações úteis e aplicáveis.


**Importância do Projeto**

A pandemia da COVID-19 trouxe desafios únicos que impactaram diferentes aspectos da vida da população brasileira. Com este trabalho, buscamos destacar esses impactos e contribuir para o entendimento das mudanças sociais e econômicas provocadas pela pandemia, oferecendo insights que podem apoiar na formulação de políticas públicas e estratégias de recuperação.

# Reconhecimento da Base e das Variáveis Disponíveis

Para dar início ao projeto, realizamos o reconhecimento inicial da base de dados da PNAD COVID19. O objetivo desta etapa foi organizar e preparar o dataset para as análises subsequentes. Seguem os passos realizados:

**Download e Organização dos Dados:**

Baixamos o histórico referente a cinco meses consecutivos da pesquisa, disponibilizado no site oficial.
Os dados foram fornecidos em diferentes arquivos, organizados por mês.

**Ajustes dos Nomes das Colunas:**

*   Utilizamos o Excel para renomear as colunas do dataset.
*   Para tornar os nomes das colunas mais intuitivos, seguimos o significado de cada variável, conforme descrito no dicionário de dados fornecido pelo IBGE.Essa padronização facilita a interpretação das variáveis durante as etapas de análise.



**Separação Mensal dos Dados:**

Como o volume de dados é elevado, os meses foram mantidos em planilhas separadas inicialmente.
Essa abordagem permitiu lidar com o tamanho da base de maneira mais eficiente durante o processo de limpeza e organização.


**União dos Dados em um Único DataFrame:**

Para facilitar o tratamento e a análise, todas as planilhas mensais serão consolidadas em um único DataFrame utilizando Python. Essa integração permitirá a aplicação de técnicas de análise e visualização de forma consistente e integrada.

# De para de variaveis seguindo o dicionário fornecido

**1. Leitura da Base de Dados**
O primeiro passo foi carregar uma base de dados em formato CSV que contém informações relacionadas à pandemia de COVID-19 no Brasil. O arquivo foi lido com a biblioteca pandas e transformado em um DataFrame (df), que permite manipular os dados de forma tabular.

**2. Criação de Dicionários para Mapeamento**
Diversos dicionários foram criados com base no dicionário disponibilizado pelo IBGE. Esses dicionários têm a finalidade de traduzir códigos numéricos presentes na base de dados em descrições mais compreensíveis. Alguns exemplos de dicionários criados:

**UF para Estados:** Transforma códigos de unidades federativas (como 35 para São Paulo) nos respectivos nomes dos estados.

**UF para Capitais:** Associa códigos de estados às suas capitais.

**Situação do domicílio: **Traduz códigos numéricos em categorias como "Urbana" ou "Rural".

Outros dicionários foram criados para categorias como sintomas, teste de COVID-19, situação de trabalho, auxílio emergencial, aluguel, entre outros.

Esses mapeamentos tornam os dados mais legíveis e interpretáveis.


**3. Identificação e Exclusão de Colunas Desnecessárias**

Algumas colunas foram identificadas como não relevantes para a análise ou redundantes. Para isso:

Foi usada uma expressão regular (regex) para encontrar colunas cujos nomes começam com letras maiúsculas e terminam com números.

Além disso, uma lista específica de colunas consideradas irrelevantes foi definida manualmente. Exemplos dessas colunas incluem:


*   Semana no mês
*   Peso do domicílio e das pessoas
*   Projeção da população
*   Região Metropolitana e Região Administrativa Integrada



**Essas colunas foram removidas do DataFrame usando o método drop.**

**4. Mapeamento das Variáveis**

Cada coluna relevante do DataFrame foi traduzida para descrições legíveis, utilizando os dicionários de mapeamento criados anteriormente. Por exemplo:

A coluna UF teve seus valores numéricos substituídos pelos nomes dos estados, como 35 para "São Paulo".

A coluna Situação do domicílio foi mapeada para valores como "Urbana" ou "Rural".

Colunas relacionadas a sintomas, como "Flag febre" ou "Flag tosse", foram traduzidas para "Sim" ou "Não".

Informações sobre contratos de trabalho, escolaridade, e auxílio emergencial foram traduzidas para descrições compreensíveis, como "Sim, tem carteira de trabalho assinada" ou "Sim, recebeu auxílio emergencial".


**5. Tratamento de Valores Nulos**
Durante o mapeamento, algumas colunas apresentaram valores nulos, que surgiram porque alguns códigos na base de dados original não estavam presentes nos dicionários de mapeamento. Esses valores nulos foram tratados substituindo-os por uma categoria genérica chamada "Desconhecido". Isso foi feito em colunas como:

UF (Unidade Federativa)
CAPITAL (Capital do estado)
Situação do domicílio


**6. Iteração em Grupos de Colunas**

Para otimizar o processo de mapeamento em colunas com categorias similares (por exemplo, sintomas, testes de COVID, resultados de testes), foram usados laços de repetição (for). Esses laços verificaram se a coluna existe no DataFrame antes de aplicar o mapeamento, garantindo que nenhuma operação fosse realizada em colunas ausentes.

Exemplos de colunas mapeadas em grupo:

Colunas de sintomas, como "Flag febre", "Flag dor de cabeça", etc.
Colunas de testes, como "Flag teste covid" ou "Flag resultado teste covid (sanguíneo)".
Colunas relacionadas a condições de saúde, como "Flag diabete" e "Flag hipertensão".


**7. Exportação do DataFrame Tratado**

Após o tratamento e mapeamento, o DataFrame resultante foi salvo em um novo arquivo CSV. Esse arquivo consolidado pode ser usado em análises posteriores, garantindo que os dados estejam padronizados e fáceis de interpretar.
"""

# Este script foi desenvolvido para transformar e modelar variáveis de uma base de dados contendo informações da PNAD COVID-19,
# fornecida pelo IBGE. A base é bastante volumosa, com aproximadamente 1,9 milhões de registros, e foi processada no software Spyder,
# devido ao seu desempenho eficiente com grandes volumes de dados.

# O principal objetivo foi aplicar um mapeamento detalhado aos dados e preparar a base para análises posteriores, tornando as variáveis
# mais interpretáveis.


##Importando as bibliotecas necessárias##
import pandas as pd
import re


df = pd.read_csv(r'C:\Users\monica\Downloads\base_covid_unificada.csv') #caminho da base que exportamos em excel e unimos todos os meses

# Dicionário de mapeamento de códigos utilizabdo o de para do dícionário
uf_para_estado = {
    11: "Rondônia",
    12: "Acre",
    13: "Amazonas",
    14: "Roraima",
    15: "Pará",
    16: "Amapá",
    17: "Tocantins",
    21: "Maranhão",
    22: "Piauí",
    23: "Ceará",
    24: "Rio Grande do Norte",
    25: "Paraíba",
    26: "Pernambuco",
    27: "Alagoas",
    28: "Sergipe",
    29: "Bahia",
    31: "Minas Gerais",
    32: "Espírito Santo",
    33: "Rio de Janeiro",
    35: "São Paulo",
    41: "Paraná",
    42: "Santa Catarina",
    43: "Rio Grande do Sul",
    50: "Mato Grosso do Sul",
    51: "Mato Grosso",
    52: "Goiás",
    53: "Distrito Federal"
}

uf_para_capital = {
    11: "Município de Porto Velho (RO)",
    12: "Município de Rio Branco (AC)",
    13: "Município de Manaus (AM)",
    14: "Município de Boa Vista (RR)",
    15: "Município de Belém (PA)",
    16: "Município de Macapá (AP)",
    17: "Município de Palmas (TO)",
    21: "Município de São Luís (MA)",
    22: "Município de Teresina (PI)",
    23: "Município de Fortaleza (CE)",
    24: "Município de Natal (RN)",
    25: "Município de João Pessoa (PB)",
    26: "Município de Recife (PE)",
    27: "Município de Maceió (AL)",
    28: "Município de Aracaju (SE)",
    29: "Município de Salvador (BA)",
    31: "Município de Belo Horizonte (MG)",
    32: "Município de Vitória (ES)",
    33: "Município de Rio de Janeiro (RJ)",
    35: "Município de São Paulo (SP)",
    41: "Município de Curitiba (PR)",
    42: "Município de Florianópolis (SC)",
    43: "Município de Porto Alegre (RS)",
    50: "Município de Campo Grande (MS)",
    51: "Município de Cuiabá (MT)",
    52: "Município de Goiânia (GO)",
    53: "Município de Brasília (DF)"
}

situacao_domicilio= {
    1: "Urbana",
    2: "Rural"
}

# Dicionário de mapeamento de códigos para descrições de parentesco
codigo_para_parentesco = {
    1: "Pessoa responsável pelo domicílio",
    2: "Cônjuge ou companheiro(a) de sexo diferente",
    3: "Cônjuge ou companheiro(a) do mesmo sexo",
    4: "Filho(a) do responsável e do cônjuge",
    5: "Filho(a) somente do responsável",
    6: "Filho(a) somente do cônjuge",
    7: "Genro ou nora",
    8: "Pai, mãe, padrasto ou madrasta",
    9: "Sogro(a)",
    10: "Neto(a)",
    11: "Bisneto(a)",
    12: "Irmão ou irmã",
    13: "Avô ou avó",
    14: "Outro parente",
    15: "Agregado(a) - Não parente que não compartilha despesas",
    16: "Convivente - Não parente que compartilha despesas",
    17: "Pensionista",
    18: "Empregado(a) doméstico(a)",
    19: "Parente do(a) empregado(a) doméstico(a)"
}

codigo_para_sexo = {
    1: "Homem",
    2: "Mulher"
}

codigo_para_raca = {
    1: "Branca",
    2: "Preta",
    3: "Amarela",
    4: "Parda",
    5: "Indígena",
    6: "Ignorado"
}

# Dicionário de mapeamento de códigos para descrições de escolaridade
codigo_para_escolaridade = {
    1: "Sem instrução",
    2: "Fundamental incompleto",
    3: "Fundamental completo",
    4: "Médio incompleto",
    5: "Médio completo",
    6: "Superior incompleto",
    7: "Superior completo",
    8: "Pós-graduação, mestrado ou doutorado"
}

codigo_para_tipoEscola = {
    1: "Pública",
    2: "Privada"
}

# Dicionário de mapeamento de códigos para descrições de formato de ensino
codigo_para_formato_ensino = {
    1: "Sim, normalmente",
    2: "Sim, mas apenas parcialmente",
    3: "Não, e meu normalmente é presencial/semipresencial",
    4: "Não, meu curso é online"
}

# Dicionário de mapeamento de códigos para descrições de realização de atividades
codigo_para_realizacao_atividades = {
    1: "Sim, e realizou pelo menos parte delas",
    2: "Sim, mas não realizou (por qualquer motivo)",
    3: "Não",
    4: "Não, porque estava de férias",
    5: "Não aplicável"
}

codigo_para_motivos_em_casa = {
    1: "Sim, e realizou pelo menos parte delas",
    2: "Sim, mas não realizou (por qualquer motivo)",
    3: "Não",
    4: "Não, porque estava de férias"
}

codigo_para_motivos_nao_realizou = {
    1: "Não tinha computador / tablet / celular disponível",
    2: "Não tinha acesso à internet ou a qualidade dela era insuficiente",
    3: "Por problemas de saúde da própria pessoa",
    4: "Tinha que cuidar dos afazeres domésticos, do(s) filhos ou de outro(s) parentes",
    5: "Não conseguiu se concentrar",
    6: "Outro motivo. Especifique."
}

codigo_para_dias = {
    1: "1 dia",
    2: "2 dias",
    3: "3 dias",
    4: "4 dias",
    5: "5 dias",
    6: "6 ou 7 dias"
}

codigo_para_descricao = {
    1: "Sim",
    2: "Não",
    3: "Não sabe",
    9: "Ignorado"
}


codigo_para_resultado = {
    1: "Positivo",
    2: "Negativo",
    3: "Inconclusivo",
    4: "Ainda não recebeu o resultado",
    9: "Ignorado"
}

colunas_para_mapear_sintomas = [
    'Flag febre', 'Flag tosse', 'Flag dor de garganta', 'Flag problemas respiratórios',
    'Flag dor de cabeça', 'Flag dor no peito', 'Flag nausea',
    'Flag nariz escorrendo/entupido', 'Flag Fadiga', 'Flag dor nos olhos',
    'Flag perda de sentidos', 'Flag dor muscular', 'Flag diarreia'
]


colunas_para_mapear_teste = [
    'Ida ao serviço de saúde', 'optou por ficar em casa',
       'Optou por ligar para um profissional', 'Optou pela auto medicação',
       'Seguiu a orientação profissional',
       'Optou por receber a visita de um profissional da saúde SUS',
       'Optou por receber a visita de um profissional da saúde PARTICULAR',
       'Providência tomada foi outra',
       'Local que buscou atendimento foi posto/UBS',
       'Local que buscou atendimento foi pronto socorro do SUS/UPA',
       'Local que buscou atendimento foi hospital do SUS',
       'Local que buscou atendimento foi ambulatório ou consultório privado ',
       'Local que buscou atendimento foi pronto socorro privado',
       'Local que buscou atendimento foi hospital privado', 'Flag internação',
       'Flag procedimentos', 'Flag Plano de saúde', 'Flag teste covid',
       'tipo do teste (cotonete)'
]

colunas_para_mapear_teste_resultado = [
'Flag resultado teste covid (cotonete)', 'Flag resultado teste covid (sanguineo)'
]

colunas_para_mapear_flag_teste = [
'Flag diabete', 'Flag hipertensão', 'Flag doenças respiratórias',
'Flag doenças cardiovasculares', 'Flag trastorno depressivo',
'Flag doenças cancerigenas'
]

codigo_para_restricao = {
    1: "Não fez restrição, levou vida normal como antes da pandemia",
    2: "Reduziu o contato com as pessoas, mas continuou saindo de casa para trabalho ou atividades não essenciais e/ou recebendo visitas",
    3: "Ficou em casa e só saiu em caso de necessidade básica",
    4: "Ficou rigorosamente em casa",
    9: "Ignorado"
}


codigo_para_descricao_papel_trabalho = {
    1: "Trabalhador doméstico (empregado doméstico, cuidados, babá)",
    2: "Militar do exército, marinha ou aeronáutica",
    3: "Policial militar ou bombeiro militar",
    4: "Empregado do setor privado",
    5: "Empregado do setor público (inclusive empresas de economia mista)",
    6: "Empregador",
    7: "Conta própria",
    8: "Trabalhador familiar não remunerado em ajuda a membro do domicílio ou parente",
    9: "Estava fora do mercado de trabalho (fazia apenas afazeres domésticos, cuidados de pessoas ou produção para próprio consumo)"
}

codigo_para_descricao_contrato_trabalho = {
    1: "Sim, tem carteira de trabalho assinada",
    2: "Sim, é servidor público estatutário",
    3: "Não"
}


codigo_para_descricao_segmento_trabalho = {
    "01": "Agricultura, pecuária, produção florestal e pesca",
    "02": "Extração de petróleo, carvão mineral, minerais metálicos, pedra, areia, sal etc.",
    "03": "Indústria da transformação (inclusive confecção e fabricação caseira)",
    "04": "Fornecimento de eletricidade e gás, água, esgoto e coleta de lixo",
    "05": "Construção",
    "06": "Comércio no atacado e varejo",
    "07": "Reparação de veículos automotores e motocicletas",
    "08": "Transporte de passageiros",
    "09": "Transporte de mercadorias",
    "10": "Armazenamento, correios e serviços de entregas",
    "11": "Hospedagem (hotéis, pousadas etc.)",
    "12": "Serviço de alimentação (bares, restaurantes, ambulantes de alimentação)",
    "13": "Informação e comunicação (jornais, rádio e televisão, telecomunicações e informática)",
    "14": "Bancos, atividades financeiras e de seguros",
    "15": "Atividades imobiliárias",
    "16": "Escritórios de advocacia, engenharia, publicidade e veterinária (Atividades profissionais, científicas e técnicas)",
    "17": "Atividades de locação de mão de obra, segurança, limpeza, paisagismo e teleatendimento",
    "18": "Administração pública (governo federal, estadual e municipal)",
    "19": "Educação",
    "20": "Saúde humana e assistência social",
    "21": "Organizações religiosas, sindicatos e associações",
    "22": "Atividade artísticas, esportivas e de recreação",
    "23": "Cabeleireiros, tratamento de beleza e serviços pessoais",
    "24": "Serviço doméstico remunerado (será imputado da posição na ocupação)",
    "25": "Outro"
}

codigo_para_contato_funcionarios = {
   "01": "1 a 5 empregados ",
   "02": "6 a 10 empregados",
   "03": "11 ou mais empregados"


}

codigo_para_renda = {
    1: "Sim",
    2: "Não",
    3: "Não aplicável"

}

codigo_para_emprestmo = {
    1: "Sim, e pelo menos um morador conseguiu",
    2: "Sim, mas nenhum morador conseguiu",
    3: "Não solicitou"

}

codigo_para_descricao_domicilio = {
    "01": "Próprio - já pago ",
    "02": "Próprio - ainda pagando",
    "03": "Alugado",
    "04": "Cedido por empregador",
    "05": "Cedido por familiar",
    "06": "Cedido de outra forma ",
    "07": "Outra condição"
}

faixa_aluguel = {
    "00": "1 - 100",
    "01": "101 - 300",
    "02": "301 - 600",
    "03": "601 - 800",
    "04": "801 - 1.600",
    "05": "1.601 - 3.000",
    "06": "3.001 - 10.000",
    "07": "10.001 - 50.000",
    "08": "50.001 - 100.000",
    "09": "Mais de 100.000",
    "88": "Aluguel a vencer",
    None: "Não aplicável"  # Representa valores nulos
}

itens_basicos_protecao = {
    1: "Sim",
    2: "Não",
    3: "Não sabe"

}


# Carregar o arquivo CSV
df = pd.read_csv(r'C:\Users\monica\Downloads\base_covid_unificada.csv')

# Identificar colunas que começam com uma letra maiúscula e terminam com um número para excluir
colunas_para_excluir = [col for col in df.columns if re.match(r'^[A-Z].*\d$', col)]


######## AQUI COLOCAMOS AS COLUNAS PARA EXCLUIR ############################
colunas_para_excluir.extend([col for col in ['Semana no mês','Flag Rendimento recebido de aposentadoria e pensão','Função de trabalho','Flag afastado do trabalho', 'Motivo do afastamento',
'Tempo de afastamento ', 'Tem mais de um trabalho','Peso do domicílio e das pessoas (estratificado)','Domínios de projeção','Peso do domicílio e das pessoas','Projeção da população','Tipo de área','Região Metropolitana e Região Administrativa Integrada','B009D','B009C','Estrato', 'UPA','posest', 'Projeção da população', 'Peso do domícilio e das pessoas', 'Peso do domícilio e das pessoas (estratificado)', 'Número de ordem','C007A', 'C007F', 'C009A', 'C011A','C017A', 'Projeção da população'] if col in df.columns])

# Excluir as colunas identificadas do DataFrame
df.drop(columns=colunas_para_excluir, inplace=True)

# Aplicar o mapeamento nas colunas utilizando a variaveis do de para do dicionário criado
df['UF'] = df['UF'].map(uf_para_estado)

df['CAPITAL'] = df['CAPITAL'].map(uf_para_estado)

df['Situação do domicílio'] = df['Situação do domicílio'].map(situacao_domicilio)

df['Condição no domicílio'] = df['Condição no domicílio'].map(codigo_para_parentesco)

df['Cor ou raça'] = df['Cor ou raça'].map(codigo_para_raca)

df['Escolaridade'] = df['Escolaridade'].map(codigo_para_escolaridade)

df['Sexo'] = df['Sexo'].map(codigo_para_sexo)

df['Flag escola '] = df['Flag escola '].map(codigo_para_tipoEscola)

df['Flag Atividade Presencial'] = df['Flag Atividade Presencial'].map(codigo_para_formato_ensino)

df['Flag Atividade em casa'] = df['Flag Atividade em casa'].map(codigo_para_motivos_em_casa)

df['Flag realizou atividade'] = df['Flag realizou atividade'].map(codigo_para_motivos_nao_realizou)

df['Frequencia atividade escolar'] = df['Frequencia atividade escolar'].map(codigo_para_dias)

df['Tipo do teste (sanguineo)'] = df['Tipo do teste (sanguineo)'].map(codigo_para_descricao)

df['Flag restrição de  contato '] = df['Flag restrição de  contato '].map(codigo_para_restricao)

df['Flag  trabalho'] = df['Flag  trabalho'].map(codigo_para_descricao)


df['Papel no trabalho'] = df['Papel no trabalho'].map(codigo_para_descricao_papel_trabalho)

df['Contrato de trabalho'] = df['Contrato de trabalho'].map(codigo_para_descricao_contrato_trabalho)

df['Segmento de atuação'] = df['Segmento de atuação'].map(codigo_para_descricao_segmento_trabalho)

df['Contato com outros funcionarios'] = df['Contato com outros funcionarios'].map(codigo_para_contato_funcionarios)

df['Contribuição INSS'] = df['Contribuição INSS'].map(codigo_para_renda)

df['Valor aposentadoria/pensão'] = df['Valor aposentadoria/pensão'].map(codigo_para_renda)

df['Flag Bolsa família'] = df['Flag Bolsa família'].map(codigo_para_renda)

df['Auxílios emergenciais relacionados ao coronavirus'] = df['Auxílios emergenciais relacionados ao coronavirus'].map(codigo_para_renda)

df['Flag Seguro desemprego'] = df['Flag Seguro desemprego'].map(codigo_para_renda)

df['Flag Emprestimo periodo covid'] = df['Flag Emprestimo periodo covid'].map(codigo_para_emprestmo)

df['Emprestimo por banco ou financeira'] = df['Emprestimo por banco ou financeira'].map(codigo_para_renda)


df['Domicilio'] = df['Domicilio'].map(codigo_para_descricao_domicilio)

df['Número da faixa do aluguel pago'] = df['Número da faixa do aluguel pago'].map(faixa_aluguel)

df[' itens básicos de limpeza e proteção: sabão ou detergente'] = df[' itens básicos de limpeza e proteção: sabão ou detergente'].map(itens_basicos_protecao)

df['itens básicos de limpeza e proteção: álcool 70% ou superior (gel ou líquido)'] = df['itens básicos de limpeza e proteção: álcool 70% ou superior (gel ou líquido)'].map(itens_basicos_protecao)

df['itens básicos de limpeza e proteção: máscaras'] = df['itens básicos de limpeza e proteção: máscaras'].map(itens_basicos_protecao)



# Verificar se há valores nulos (códigos não mapeados)
# print("Valores nulos na coluna UF:", df['UF'].isnull().sum())

# Substituir valores nulos por 'Desconhecido' (opcional)
df['UF'].fillna('Desconhecido', inplace=True)

# print("Valores nulos na coluna CAPITAL:", df['CAPITAL'].isnull().sum())

# Substituir valores nulos por 'Desconhecido' (opcional)
df['CAPITAL'].fillna('Desconhecido', inplace=True)

# print("Valores nulos na coluna Situacao Domicilio", df['Situação do domicílio'].isnull().sum())

# Substituir valores nulos por 'Desconhecido' (opcional)
df['Situação do domicílio'].fillna('Desconhecido', inplace=True)


#### Laço for para iterar sobre as colunas
for coluna in colunas_para_mapear_sintomas:
    if coluna in df.columns:  # Verifica se a coluna existe no DataFrame
        df[coluna] = df[coluna].map(codigo_para_descricao)



for coluna in colunas_para_mapear_teste:
    if coluna in df.columns:  # Verifica se a coluna existe no DataFrame
        df[coluna] = df[coluna].map(codigo_para_descricao)


for coluna in colunas_para_mapear_teste_resultado:
    if coluna in df.columns:  # Verifica se a coluna existe no DataFrame
        df[coluna] = df[coluna].map(codigo_para_resultado)


for coluna in colunas_para_mapear_flag_teste:
    if coluna in df.columns:  # Verifica se a coluna existe no DataFrame
        df[coluna] = df[coluna].map(codigo_para_descricao)


#print(df)
#print(df.columns)


# Exportar o DataFrame para um arquivo CSV
df.to_csv(r'C:\Users\monica\Documents\projetoEinsten\Base_covid.csv', index=False)

"""Com a base exportada, realizamos o upload no Google Colab, onde vamos analisá-la e aplicar as etapas necessárias para explorar e interpretar os dados de forma mais detalhada."""

import pandas as pd

# Ler o arquivo CSV como DataFrame
df = pd.read_csv('/content/Base_covid.csv', low_memory=False)


# Visualizar as primeiras linhas do DataFrame
display(df.head())

df.columns #verificando todas as colunas presentes no nosso DF que selecionamos

# Obter valores únicos de uma variável (coluna)
valores_unicos = df['Mês'].unique()

# Exibir os valores únicos
print(valores_unicos)

"""Instalando a biblioteca SQLITE3 para trabalhar com SQL junto ao Python"""

import sqlite3
import pandas as pd

# Criar conexão SQLite (salvo em disco)
conn = sqlite3.connect("database.sqlite")

# Salvar o DataFrame como tabela no SQLite
df.to_sql('base_covid', conn, if_exists='replace', index=False)

#Query para verificar número de linhas
query = "SELECT COUNT(*) AS total_linhas FROM base_covid"
result = pd.read_sql_query(query, conn)

# Exibir o resultado
print(result)

query = "SELECT DISTINCT Mês FROM base_covid"
result = pd.read_sql_query(query, conn)

# Exibir o resultado
print(result)

"""# **Questões para a Análise**

# Demografia e características dos moradores:

**A-** Qual é a distribuição de idade por estado e sexo?

**B-** Há uma diferença na renda média entre pessoas que buscaram atendimento em serviços públicos e privados por estado?

**C-** Qual é a proporção de pessoas que buscaram atendimento privado em relação ao público, segmentada por faixa de renda em cada estado?

**D-** A faixa de renda está correlacionada com a posse de itens básicos de limpeza e proteção (sabão, álcool 70% e máscaras)?

**E** Quantos moradores possuem mais de 60 anos em cada estado e qual a relação com a presença de comorbidades (ex.: diabetes, hipertensão)?
"""

# A- Qual é a distribuição de idade média por estado e sexo?
query = """
SELECT
    UF,
    SUM(COUNT(*)) OVER (PARTITION BY UF) AS total_pessoas_estado, -- Calcula o total de pessoas por estado somando os registros de todas as combinações de sexo para o mesmo estado.
    Sexo,
    COUNT(*) AS total_pessoas, -- Conta o número total de registros para cada combinação de estado e sexo
    AVG("Idade do morador ") AS idade_media
FROM base_covid
GROUP BY
    UF, Sexo - Agrupa os dados por estado (UF) e sexo (Sexo) para realizar os cálculos de contagem e média.
ORDER BY
    total_pessoas_estado DESC, UF, Sexo; -- Ordena os resultados pelo total geral de pessoas no estado em ordem decrescente
"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""**Distribuição de Idade por Estado e Sexo**
A análise revelou que:

**Estados com mais pessoas:**

Minas Gerais: 172.725 pessoas (idade média: homens 37,57 anos, mulheres 39,39 anos).

São Paulo: 167.147 pessoas (idade média: homens 37,95 anos, mulheres 40,14 anos).

Rio de Janeiro: 145.417 pessoas (idade média: homens 38,58 anos, mulheres 42,06 anos).

**Diferenças entre sexos:**

Em todos os estados, as mulheres superam os homens em número e têm idades médias mais altas.

**Maiores idades médias:**

Rio Grande do Sul e Rio de Janeiro destacam-se com idades médias acima de 42 anos para mulheres.

**Menores idades médias:**

Estados do Norte, como Roraima e Amapá, têm idades médias abaixo de 32 anos.
As regiões Sul e Sudeste apresentam populações mais numerosas e envelhecidas, enquanto a Região Norte é mais jovem e menos populosa.
"""

query = """
SELECT DISTINCT "Renda "
FROM base_covid
ORDER BY "Renda " ASC;
"""

result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

# B- Há uma diferença na renda média entre pessoas que buscaram atendimento em serviços públicos e privados por estado?
query = """
WITH atendimento_classificado AS (
    SELECT
        UF,
        -- Classificação do tipo de atendimento entre privado ou público
        CASE
            WHEN "Local que buscou atendimento foi posto/UBS" = 'Sim'
              OR "Local que buscou atendimento foi pronto socorro do SUS/UPA" = 'Sim'
              OR "Local que buscou atendimento foi hospital do SUS" = 'Sim'
            THEN 'Público'
            WHEN "Local que buscou atendimento foi ambulatório ou consultório privado " = 'Sim'
              OR "Local que buscou atendimento foi pronto socorro privado" = 'Sim'
              OR "Local que buscou atendimento foi hospital privado" = 'Sim'
            THEN 'Privado'
            ELSE 'Não Informado'
        END AS tipo_atendimento,

        -- Fazendo o DE-PARA para transformar a variável renda nos valores reais
        CASE
            WHEN "Renda " = '00' THEN '0 - 100'
            WHEN "Renda " = '01' THEN '101 - 300'
            WHEN "Renda " = '02' THEN '301 - 600'
            WHEN "Renda " = '03' THEN '601 - 800'
            WHEN "Renda " = '04' THEN '801 - 1.600'
            WHEN "Renda " = '05' THEN '1.601 - 3.000'
            WHEN "Renda " = '06' THEN '3.001 - 10.000'
            WHEN "Renda " = '07' THEN '10.001 - 50.000'
            WHEN "Renda " = '08' THEN '50.001 - 100.000'
            WHEN "Renda " = '09' THEN 'Mais de 100.000'
            ELSE 'Não Aplicável'
        END AS faixa_renda,

        "Valor aposentadoria/pensão" AS aposentadoria,  -- Valor recebido de aposentadoria/pensão
        "Flag Bolsa família" AS recebe_bolsa_familia,  -- Se recebe Bolsa Família
        "Valor recebido ref bolsa família" AS valor_bolsa_familia -- Valor recebido do Bolsa Família
    FROM base_covid
    WHERE
        "Ida ao serviço de saúde" = 'Sim' -- Considera apenas pessoas que buscaram atendimento
)
SELECT
    UF,
    faixa_renda,  -- Faixa de renda convertida
    tipo_atendimento,
    COUNT(*) AS total_pacientes,
    aposentadoria,
    SUM(CASE WHEN recebe_bolsa_familia = 'Sim' THEN 1 ELSE 0 END) AS total_bolsa_familia,
    ROUND(AVG(valor_bolsa_familia), 2) AS media_valor_bolsa_familia
FROM atendimento_classificado
WHERE tipo_atendimento IN ('Público', 'Privado') -- Exclui "Não Informado"
GROUP BY UF, faixa_renda, tipo_atendimento
ORDER BY UF, faixa_renda, tipo_atendimento;

"""
result2 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result2)

#C- Qual é a proporção de pessoas que buscaram atendimento privado em relação ao público, segmentada por faixa de renda em cada estado?

query = """
WITH faixa_renda AS (
    SELECT
        UF,  -- Estado
        -- Conversão dos códigos de renda para faixas reais
        CASE
            WHEN "Renda " = '00' THEN '0 - 100'
            WHEN "Renda " = '01' THEN '101 - 300'
            WHEN "Renda " = '02' THEN '301 - 600'
            WHEN "Renda " = '03' THEN '601 - 800'
            WHEN "Renda " = '04' THEN '801 - 1.600'
            WHEN "Renda " = '05' THEN '1.601 - 3.000'
            WHEN "Renda " = '06' THEN '3.001 - 10.000'
            WHEN "Renda " = '07' THEN '10.001 - 50.000'
            WHEN "Renda " = '08' THEN '50.001 - 100.000'
            WHEN "Renda " = '09' THEN 'Mais de 100.000'
            ELSE 'Não Aplicável'
        END AS faixa_renda,  -- Segmentação por faixa de renda

        COUNT(*) AS total_pessoas,  -- Total de pessoas por faixa de renda e estado

        -- Contagem de pessoas que buscaram atendimento privado
        SUM(CASE WHEN
            "Local que buscou atendimento foi ambulatório ou consultório privado " = 'Sim' OR
            "Local que buscou atendimento foi pronto socorro privado" = 'Sim' OR
            "Local que buscou atendimento foi hospital privado" = 'Sim'
            THEN 1 ELSE 0 END) AS total_atendimento_privado,

        -- Contagem de pessoas que buscaram atendimento público
        SUM(CASE WHEN
            "Local que buscou atendimento foi posto/UBS" = 'Sim' OR
            "Local que buscou atendimento foi pronto socorro do SUS/UPA" = 'Sim' OR
            "Local que buscou atendimento foi hospital do SUS" = 'Sim'
            THEN 1 ELSE 0 END) AS total_atendimento_publico

    FROM base_covid
    WHERE
        "Renda " IS NOT NULL -- Garante que os registros de renda sejam válidos
    GROUP BY UF, faixa_renda
),
proporcao_atendimento AS (
    SELECT
        UF,
        faixa_renda,
        total_pessoas,
        total_atendimento_publico,
        total_atendimento_privado,

        -- Cálculo do percentual de atendimento privado e público
        ROUND(total_atendimento_privado * 100.0 / NULLIF(total_atendimento_publico + total_atendimento_privado, 0), 2) AS percentual_privado,
        ROUND(total_atendimento_publico * 100.0 / NULLIF(total_atendimento_publico + total_atendimento_privado, 0), 2) AS percentual_publico
    FROM faixa_renda
)
SELECT * FROM proporcao_atendimento
ORDER BY UF, faixa_renda;

"""
result3 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result3)

#D- A faixa de renda está correlacionada com a posse de itens básicos de limpeza e proteção (sabão, álcool 70% e máscaras)?

query = """
-- Correlação entre faixa de renda e posse de itens básicos de limpeza e proteção
-- Correlação entre faixa de renda, posse de itens básicos e total de pessoas
SELECT
    "Mês", -- Mês da análise
    CASE
        WHEN "Renda " = '00' THEN '0 - 100'
        WHEN "Renda " = '01' THEN '101 - 300'
        WHEN "Renda " = '02' THEN '301 - 600'
        WHEN "Renda " = '03' THEN '601 - 800'
        WHEN "Renda " = '04' THEN '801 - 1.600'
        WHEN "Renda " = '05' THEN '1.601 - 3.000'
        WHEN "Renda " = '06' THEN '3.001 - 10.000'
        WHEN "Renda " = '07' THEN '10.001 - 50.000'
        WHEN "Renda " = '08' THEN '50.001 - 100.000'
        WHEN "Renda " = '09' THEN 'Mais de 100.000'
        ELSE 'Não Aplicável'
    END AS faixa_renda, -- Segmentação por faixa de renda

    COUNT(*) AS total_domicilios, -- Total de domicílios por faixa de renda
    SUM("Número de seleção do domicílio") AS total_pessoas, -- Total de pessoas (soma da variável que representa pessoas por domicílio)
    SUM(CASE WHEN " itens básicos de limpeza e proteção: sabão ou detergente" = 'Sim' THEN 1 ELSE 0 END) AS total_sabao, -- Total com sabão/detergente
    SUM(CASE WHEN "itens básicos de limpeza e proteção: álcool 70% ou superior (gel ou líquido)" = 'Sim' THEN 1 ELSE 0 END) AS total_alcool, -- Total com álcool 70%
    SUM(CASE WHEN "itens básicos de limpeza e proteção: máscaras" = 'Sim' THEN 1 ELSE 0 END) AS total_mascaras -- Total com máscaras

FROM
    base_covid
GROUP BY
    "Mês", "Renda " -- Agrupar por mês e faixa de renda
ORDER BY
    "Mês" ASC, "Renda " ASC; -- Ordenar por mês e faixa de renda



"""
result4 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result4)

"""**Faixa de renda "0 - 100" tem menor cobertura:**

Essa faixa de renda representa um número muito pequeno de domicílios em relação às outras, com registros significativamente baixos.
Possível implicação:
Famílias de baixa renda têm menor acesso a esses itens.
Dados dessa faixa podem ser incompletos ou pouco representativos.
Faixas de renda mais altas apresentam maior acesso:

Faixas como "801 - 1.600", "1.601 - 3.000", e "3.001 - 10.000" mostram altos totais de sabão, álcool 70% e máscaras.

Mesmo faixas superiores, como "10.001 - 50.000", mantêm altos valores totais indicando que pessoas de maior renda têm melhor acesso embora que menos pessoas nessa faixa salarial.
"""

#E - Quantos moradores possuem mais de 60 anos em cada estado e qual a relação com a presença de comorbidades (ex.: diabetes, hipertensão)?

query = """
WITH idosos_por_estado AS (
    SELECT
        UF,  -- Estado
        COUNT(*) AS total_idosos  -- Total de moradores com >60 anos
    FROM
        base_covid
    WHERE
        "Idade do morador" > 60  -- Filtra moradores com > 60 anos
    GROUP BY
        UF
),
idosos_comorbidades AS (
    SELECT
        UF,  -- Estado
        SUM(CASE WHEN "Flag diabete" = 'Sim'
                 OR "Flag hipertensão" = 'Sim'
                 OR "Flag doenças respiratórias" = 'Sim'
                 OR "Flag doenças cardiovasculares" = 'Sim'
                 OR "Flag doenças cancerigenas" = 'Sim'
                 THEN 1 ELSE 0 END) AS total_comorbidades,  -- Total de idosos com pelo menos uma comorbidade
        SUM(CASE WHEN "Flag diabete" = 'Sim' THEN 1 ELSE 0 END) AS total_diabetes,  -- Total de idosos com diabetes
        SUM(CASE WHEN "Flag hipertensão" = 'Sim' THEN 1 ELSE 0 END) AS total_hipertensao,  -- Total de idosos com hipertensão
        SUM(CASE WHEN "Flag diabete" != 'Sim'
                 AND "Flag hipertensão" != 'Sim'
                 AND "Flag doenças respiratórias" != 'Sim'
                 AND "Flag doenças cardiovasculares" != 'Sim'
                 AND "Flag doenças cancerigenas" != 'Sim'
                 THEN 1 ELSE 0 END) AS total_sem_comorbidades  -- Total de idosos sem nenhuma comorbidade
    FROM
        base_covid
    WHERE
        "Idade do morador" > 60  -- Filtra apenas os idosos
    GROUP BY
        UF
)
SELECT
    ipe.UF,  -- Estado
    ipe.total_idosos,  -- Total de idosos no estado
    ic.total_comorbidades,  -- Total de idosos com pelo menos uma comorbidade
    ic.total_diabetes,  -- Total de idosos com diabetes
    ic.total_hipertensao,  -- Total de idosos com hipertensão
    ic.total_sem_comorbidades  -- Total de idosos sem nenhuma comorbidade
FROM
    idosos_por_estado ipe
LEFT JOIN
    idosos_comorbidades ic
    ON ipe.UF = ic.UF  -- Junta os dados de idosos e comorbidades por estado
ORDER BY
    ipe.total_idosos DESC;  -- Ordena pelos estados com mais idosos

"""
result5= pd.read_sql_query(query, conn)

# Exibir o resultado
display(result5)

"""**Conclusão**

Os estados mais populosos, como Minas Gerais, São Paulo e Rio de Janeiro, concentram tanto o maior número de idosos quanto os maiores números de comorbidades. Por outro lado, estados menores, como Amapá e Roraima, apresentam números muito inferiores, refletindo suas populações menores. Este tipo de análise é essencial para planejar políticas públicas voltadas para a saúde da população idosa.

# Questões Saúde e sintomas:

**F-** Qual a frequência dos principais sintomas reportados (ex.: febre, tosse, perda de sentidos) por mês?

**G-** Qual é a relação entre moradores que buscaram atendimento médico e os sintomas relatados?

**H-** Qual o percentual de moradores que realizaram testes de COVID-19 e o resultado desses testes (cotonete e sanguíneo)?

**I-** Qual o percentual de moradores que NÂO realizaram testes de COVID-19 e o resultado desses testes (cotonete e sanguíneo)?
"""

#F- Qual a frequência dos principais sintomas reportados (ex.: febre, tosse, perda de sentidos) por mês?

query = """
WITH sintomas_por_mes AS (
    SELECT
        "Mês",  -- Mês do ano
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS febre,  -- Total de casos com febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS tosse,  -- Total de casos com tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de casos com perda de sentidos
        SUM(  -- Soma de todos os sintomas reportados
            CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END +
            CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END +
            CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END
        ) AS total_sintomas
    FROM
        base_covid
    GROUP BY
        "Mês"  -- Agrupa os resultados por mês
    ORDER BY
        "Mês" DESC  -- Ordena os resultados por mês
)
SELECT
    "Mês",
    febre,
    tosse,
    perda_de_sentidos,
    total_sintomas  -- Soma total de sintomas reportados por mês
FROM
    sintomas_por_mes;

"""
result6 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result6)

"""**Conclusões:**

Tosse foi o sintoma mais prevalente em todos os meses analisados, com um pico em julho de 2020 (11.553 casos).

Febre e perda de sentidos também tiveram seus maiores números em julho de 2020, indicando um pico geral nos sintomas.

A redução nos números de sintomas ao longo do tempo pode refletir o impacto das medidas de saúde pública ou uma possível diminuição na disseminação do vírus durante este período.
"""

query = """
SELECT DISTINCT "Ida ao serviço de saúde",
                 "Optou por ligar para um profissional",
                 "Optou por receber a visita de um profissional da saúde SUS",
                 "Optou por receber a visita de um profissional da saúde PARTICULAR"
                 FROM base_covid;
"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

#G- Qual é a relação entre moradores que buscaram atendimento médico e os sintomas relatados?

query = """
WITH moradores_atendimento AS (
    SELECT Mês,
        CASE
            WHEN "Ida ao serviço de saúde" = 'Sim' OR
                 "Optou por ligar para um profissional" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde SUS" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde PARTICULAR" = 'Sim'
            THEN 'Sim'
            ELSE 'Não'
        END AS buscou_atendimento,  -- Flag combinada para busca de atendimento
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS febre,  -- Total de casos com febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS tosse,  -- Total de casos com tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de casos com perda de sentidos
        COUNT(*) AS total_pessoas  -- Total de moradores no grupo
    FROM
        base_covid
    WHERE
        "Ida ao serviço de saúde" IN ('Sim', 'Não') OR
        "Optou por ligar para um profissional" IN ('Sim', 'Não') OR
        "Optou por receber a visita de um profissional da saúde SUS" IN ('Sim', 'Não') OR
        "Optou por receber a visita de um profissional da saúde PARTICULAR" IN ('Sim', 'Não')  -- Garante que as variáveis sejam válidas
    GROUP BY
        buscou_atendimento, Mês  -- Agrupa pelo indicador de busca por atendimento
)
SELECT
    Mês,
    buscou_atendimento,  -- Indicador de busca por atendimento médico
    febre,
    tosse,
    perda_de_sentidos,
    total_pessoas
FROM
    moradores_atendimento
    WHERE buscou_atendimento = 'Sim'
    ORDER BY Mês DESC;

"""
result7 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result7)

query = """
WITH moradores_atendimento AS (
    SELECT Mês,
        CASE
            WHEN "Ida ao serviço de saúde" = 'Sim' OR
                 "Optou por ligar para um profissional" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde SUS" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde PARTICULAR" = 'Sim'
            THEN 'Sim'
            ELSE 'Não'
        END AS buscou_atendimento,  -- Flag combinada para busca de atendimento
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS febre,  -- Total de casos com febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS tosse,  -- Total de casos com tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de casos com perda de sentidos
        COUNT(*) AS total_pessoas  -- Total de moradores no grupo
    FROM
        base_covid
    WHERE
        "Ida ao serviço de saúde" IN ('Sim', 'Não') OR
        "Optou por ligar para um profissional" IN ('Sim', 'Não') OR
        "Optou por receber a visita de um profissional da saúde SUS" IN ('Sim', 'Não') OR
        "Optou por receber a visita de um profissional da saúde PARTICULAR" IN ('Sim', 'Não')  -- Garante que as variáveis sejam válidas
    GROUP BY
        buscou_atendimento, Mês  -- Agrupa pelo indicador de busca por atendimento
)
SELECT
    Mês,
    buscou_atendimento,  -- Indicador de busca por atendimento médico
    febre,
    tosse,
    perda_de_sentidos,
    total_pessoas
FROM
    moradores_atendimento
    WHERE buscou_atendimento = 'Não'
    ORDER BY Mês DESC;

"""
result8 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result8)

"""**Comparação Resumida: Quem buscou vs. Quem não buscou atendimento médico**

1. Frequência Total de Pessoas
Buscou atendimento: Maior número de pessoas em todos os meses.
Exemplo: Julho/2020 – 15.828 pessoas (Sim) vs. 9.548 pessoas (Não).

2. Sintomas Relatados
Febre: Relatada mais frequentemente por quem buscou atendimento.
Exemplo: Julho/2020 – 1.903 (Sim) vs. 1.129 (Não).

Tosse: Sintoma mais comum nos dois grupos.

Exemplo: Julho/2020 – 8.170 (Sim) vs. 3.363 (Não).

Perda de Sentidos: Também mais frequente no grupo "Sim".

Exemplo: Agosto/2020 – 3.514 (Sim) vs. 1.780 (Não).


**Conclusão**
Moradores com sintomas mais graves/múltiplos têm maior probabilidade de buscar atendimento.
Tosse foi o sintoma mais comum em ambos os grupos.
O pico geral ocorreu em julho/2020, refletindo um momento crítico da pandemia.
"""

#H- Qual o percentual de moradores que realizaram testes de COVID-19 e o resultado desses testes (cotonete e sanguíneo)?

query = """
WITH total_moradores AS (
    SELECT
        COUNT(*) AS total_geral --Selecionando o total de pessoas
    FROM
        base_covid
),
testes_covid AS (
    SELECT
        Mês, -- Extrai o mês e ano da data
        CASE
            WHEN "Tipo do teste (cotonete)" = 'Sim' THEN 'Teste Cotonete'
            WHEN "Tipo do teste (sanguineo)" = 'Sim' THEN 'Teste Sanguíneo'
            ELSE 'Nenhum Teste'
        END AS tipo_teste, -- Classifica os 2 tipos de teste
        CASE
            WHEN "Tipo do teste (cotonete)" = 'Sim' THEN "Flag resultado teste covid (cotonete)"
            WHEN "Tipo do teste (sanguineo)" = 'Sim' THEN "Flag resultado teste covid (sanguineo)"
            ELSE 'Não Realizado'
        END AS resultado_teste, -- Classifica os resultados com base no tipo
        COUNT(*) AS total_testados
    FROM
        base_covid
    WHERE
        "Flag teste covid" = 'Sim' -- Considera apenas quem realizou teste
        AND (
            "Tipo do teste (cotonete)" = 'Sim' OR "Tipo do teste (sanguineo)" = 'Sim'
        ) -- Garante que seja cotonete ou sanguíneo
    GROUP BY
        Mês, tipo_teste, resultado_teste
)
SELECT
    Mês,
    tipo_teste,
    resultado_teste,
    total_testados,
    ROUND(total_testados * 100.0 / tm.total_geral, 2) AS percentual_total -- Percentual em relação ao total de moradores
FROM
    testes_covid tc
CROSS JOIN
    total_moradores tm -- Combina o total geral para cada linha
ORDER BY
    Mês DESC, total_testados DESC;
"""
result9 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result9)

"""**Conclusões:**

Testes negativos predominam em todos os meses analisados, enquanto os positivos são uma fração significativa.

O teste de cotonete foi mais amplamente utilizado do que o teste sanguíneo.
Resultados não recebidos, inconclusivos ou ignorados representam uma pequena parte, indicando um processo de testagem relativamente eficaz.

A análise sugere que o pico de testagens ocorreu em novembro de 2020, seguido por uma queda nos meses anteriores.
"""

#I- Qual o percentual de moradores que NÂO realizaram testes de COVID-19 e o resultado desses testes (cotonete e sanguíneo)?

query = """
WITH total_moradores AS (
    SELECT
        COUNT(*) AS total_geral -- Selecionando o total de pessoas
    FROM
        base_covid
),
nao_testaram AS (
    SELECT
        Mês, -- Extrai o mês e ano, se aplicável
        'Não Testou' AS tipo_teste, -- Classifica todos como "Não Testou"
        'Sem Resultado' AS resultado_teste, -- Não há resultado para quem não testou
        COUNT(*) AS total_testados -- Total de moradores que não testaram
    FROM
        base_covid
    WHERE
        "Flag teste covid" IN ('Não', 'Ignorado') -- Considera apenas quem não realizou teste
    GROUP BY
        Mês
)
SELECT
    Mês,
    tipo_teste,
    resultado_teste,
    total_testados,
    ROUND(total_testados * 100.0 / tm.total_geral, 2) AS percentual_total -- Percentual em relação ao total de moradores
FROM
    nao_testaram nt
CROSS JOIN
    total_moradores tm -- Combina o total geral para cada linha
ORDER BY
    Mês DESC, total_testados DESC;
"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""**Conclusões:**

Elevado percentual em novembro de 2020: Isso sugere que, apesar de um número expressivo de pessoas realizando testes, ainda havia uma grande parcela da população que não tinha acesso ou optava por não realizar o procedimento.

Tendência de redução nos meses anteriores: **Indica possíveis melhorias na disseminação de informações e aumento da capacidade de testagem.**

Impacto: A análise desses dados é fundamental para entender lacunas na testagem e implementar estratégias para alcançar populações que não foram testadas.

# Relacionando sintomas às comorbidades da população:

 J-Há uma correlação entre comorbidades (ex.: diabetes, hipertensão) e a ocorrência de sintomas?

 K-Quais estados têm maior frequência de sintomas em pessoas com comorbidades?

L- Há uma diferença no tipo de serviço de saúde procurado (público ou privado) por pessoas com comorbidades e sintomas?

M-Pessoas com comorbidades realizaram mais testes de COVID-19 em relação às que não possuem comorbidades?

N- Entre aqueles que testaram positivo para COVID-19, qual é a frequência de comorbidades e sintomas?

O- Pessoas com comorbidades (ex.: diabetes, hipertensão) são mais propensas a buscar atendimento médico ao apresentar sintomas?
"""

#J-Há uma correlação entre comorbidades (ex.: diabetes, hipertensão) e a ocorrência de sintomas?

query = """
WITH comorbidades_sintomas AS (
    SELECT
        CASE
            WHEN "Flag diabete" = 'Sim' OR "Flag hipertensão" = 'Sim'  OR "Flag doenças cardiovasculares" THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade,  -- Classifica se o morador tem ou não comorbidades
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS total_febre,  -- Total de febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS total_tosse,  -- Total de tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de perda de sentidos
        COUNT(*) AS total_moradores  -- Total de moradores no grupo
    FROM
        base_covid
    WHERE
        "Flag diabete" IN ('Sim', 'Não') AND
        "Flag hipertensão" IN ('Sim', 'Não') AND -- Garante que as variáveis sejam válidas
        "Flag doenças cardiovasculares" IN ('Sim', 'Não')
    GROUP BY
        tipo_comorbidade  -- Agrupa por quem tem ou não comorbidades
)
SELECT
    tipo_comorbidade,
    total_febre,
    total_tosse,
    perda_de_sentidos,
    total_moradores
FROM
    comorbidades_sintomas
ORDER BY
    tipo_comorbidade DESC;

"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""Apesar dos números absolutos serem muito maiores no grupo sem comorbidades, isso ocorre porque a base de moradores sem comorbidades é muito maior (mais de 10 vezes a quantidade de moradores com comorbidades). Assim, uma **comparação proporcional é mais adequada.**"""

# comparando proporcionanete
query = """
WITH comorbidades_sintomas AS (
    SELECT
        CASE
            WHEN "Flag diabete" = 'Sim' OR "Flag hipertensão" = 'Sim' THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade,  -- Classifica se o morador tem ou não comorbidades
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS febre,  -- Total de febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS tosse,  -- Total de tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de perda de sentidos
        COUNT(*) AS total_moradores  -- Total de moradores no grupo
    FROM
        base_covid
    WHERE
        "Flag diabete" IN ('Sim', 'Não') AND
        "Flag hipertensão" IN ('Sim', 'Não')  -- Garante que as variáveis sejam válidas
    GROUP BY
        tipo_comorbidade  -- Agrupa por quem tem ou não comorbidades
)
SELECT
    tipo_comorbidade,
    febre,
    ROUND(febre * 100.0 / total_moradores, 2) AS febre_percent,  -- Percentual de febre no grupo
    tosse,
    ROUND(tosse * 100.0 / total_moradores, 2) AS tosse_percent,  -- Percentual de tosse no grupo
    perda_de_sentidos,
    ROUND(perda_de_sentidos * 100.0 / total_moradores, 2) AS perda_de_sentidos_percent,  -- Percentual de perda de sentidos no grupo
    total_moradores
FROM
    comorbidades_sintomas
ORDER BY
    tipo_comorbidade DESC;


"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""Pessoas com comorbidades (ex.: diabetes, hipertensão) apresentam sintomas de COVID-19 **proporcionalmente mais frequentes** do que aquelas sem comorbidades:



*   Febre: 1,53% (com) vs. 0,55% (sem).
*   Tosse: 4,11% (com) vs. 1,89% (sem).
*   Perda de Sentidos: 1,85% (com) vs. 0,99% (sem).






Essas diferenças ocorrem devido ao sistema imunológico mais fragilizado e maior atenção aos sintomas no grupo com comorbidades.
"""

#K-Quais estados têm maior frequência de sintomas em pessoas com comorbidades?
# comparando já proporcionanete
query = """
WITH moradores_comorbidades AS (
    SELECT
        UF,  -- Estado
        SUM(CASE WHEN "Flag febre" = 'Sim' THEN 1 ELSE 0 END) AS febre,  -- Total de casos com febre
        SUM(CASE WHEN "Flag tosse" = 'Sim' THEN 1 ELSE 0 END) AS tosse,  -- Total de casos com tosse
        SUM(CASE WHEN "Flag perda de sentidos" = 'Sim' THEN 1 ELSE 0 END) AS perda_de_sentidos,  -- Total de casos com perda de sentidos
        COUNT(*) AS total_comorbidades -- Total de moradores com comorbidades no estado
    FROM
        base_covid
    WHERE
        "Flag diabete" = 'Sim' OR
        "Flag hipertensão" = 'Sim' OR
        "Flag doenças respiratórias" = 'Sim' OR
        "Flag doenças cardiovasculares" = 'Sim'
    GROUP BY
        UF
),
sintomas_por_estado AS (
    SELECT
        UF,
        febre,
        tosse,
        perda_de_sentidos,
        total_comorbidades,
        (febre * 100.0 / total_comorbidades) AS febre_percent,  -- Percentual de casos com febre
        (tosse * 100.0 / total_comorbidades) AS tosse_percent,  -- Percentual de casos com tosse
        (perda_de_sentidos * 100.0 / total_comorbidades) AS perda_de_sentidos_percent -- Percentual de casos com perda de sentidos
    FROM
        moradores_comorbidades
)
SELECT
    UF,
    febre,
    febre_percent,
    tosse,
    tosse_percent,
    perda_de_sentidos,
    perda_de_sentidos_percent,
    total_comorbidades
FROM
    sintomas_por_estado
ORDER BY
    total_comorbidades DESC; -- Ordena pelos estados com mais moradores com comorbidades


"""
result10 = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result10)

"""**Análises e hipóteses:**

População absoluta influencia os números totais: Estados com maior população de pessoas com comorbidades, como São Paulo e Minas Gerais, tendem a relatar mais casos absolutos de sintomas.

Percentuais elevados podem refletir maior vulnerabilidade: Estados como Distrito Federal, Roraima e Rondônia têm percentuais mais altos de sintomas, sugerindo uma maior vulnerabilidade dessa população ou possíveis diferenças no acesso a cuidados preventivos.

Tosse como o sintoma mais comum: Em praticamente todos os estados, a tosse é o sintoma mais frequentemente relatado, seguido por febre e perda de sentidos.
"""

#L- Há uma diferença no tipo de serviço de saúde procurado (público ou privado) por pessoas com comorbidades e sintomas?
query = """
WITH pessoas_comorbidades_sintomas AS (
    SELECT
        UF,
        CASE
            WHEN "Flag diabetes" = 'Sim' OR
                 "Flag hipertensão" = 'Sim' OR
                 "Flag doenças respiratórias" = 'Sim' OR
                 "Flag doenças cardiovasculares" = 'Sim' OR
                 "Flag doenças cancerigenas" = 'Sim'
            THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade,
        CASE
            WHEN "Flag febre" = 'Sim' OR
                 "Flag tosse" = 'Sim' OR
                 "Flag perda de sentidos" = 'Sim'
            THEN 'Com Sintomas'
            ELSE 'Sem Sintomas'
        END AS tipo_sintomas,
        SUM(CASE WHEN "Local que buscou atendimento foi posto/UBS" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_posto_ubs,
        SUM(CASE WHEN "Local que buscou atendimento foi pronto socorro do SUS/UPA" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_pronto_socorro_sus,
        SUM(CASE WHEN "Local que buscou atendimento foi hospital do SUS" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_hospital_sus,
        SUM(CASE WHEN "Local que buscou atendimento foi ambulatório ou consultório privado " = 'Sim' THEN 1 ELSE 0 END) AS atendimento_ambulatorio_privado,
        SUM(CASE WHEN "Local que buscou atendimento foi pronto socorro privado" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_pronto_socorro_privado,
        SUM(CASE WHEN "Local que buscou atendimento foi hospital privado" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_hospital_privado,
        COUNT(*) AS total_pessoas
    FROM
        base_covid
    WHERE
        ("Flag diabetes" = 'Sim' OR
         "Flag hipertensão" = 'Sim' OR
         "Flag doenças respiratórias" = 'Sim' OR
         "Flag doenças cardiovasculares" = 'Sim' OR
         "Flag doenças cancerigenas" = 'Sim')  -- Comorbidades
        AND
        ("Flag febre" = 'Sim' OR
         "Flag tosse" = 'Sim' OR
         "Flag perda de sentidos" = 'Sim')  -- Sintomas
    GROUP BY
        UF, tipo_comorbidade, tipo_sintomas
),
resumo_servico_saude AS (
    SELECT
        UF,
        tipo_comorbidade,
        tipo_sintomas,
        atendimento_posto_ubs,
        atendimento_pronto_socorro_sus,
        atendimento_hospital_sus,
        atendimento_ambulatorio_privado,
        atendimento_pronto_socorro_privado,
        atendimento_hospital_privado,
        total_pessoas,
        ROUND((atendimento_posto_ubs * 100.0 / total_pessoas), 2) AS percentual_posto_ubs,
        ROUND((atendimento_pronto_socorro_sus * 100.0 / total_pessoas), 2) AS percentual_pronto_socorro_sus,
        ROUND((atendimento_hospital_sus * 100.0 / total_pessoas), 2) AS percentual_hospital_sus,
        ROUND((atendimento_ambulatorio_privado * 100.0 / total_pessoas), 2) AS percentual_ambulatorio_privado,
        ROUND((atendimento_pronto_socorro_privado * 100.0 / total_pessoas), 2) AS percentual_pronto_socorro_privado,
        ROUND((atendimento_hospital_privado * 100.0 / total_pessoas), 2) AS percentual_hospital_privado
    FROM
        pessoas_comorbidades_sintomas
)
SELECT
    UF,
    tipo_comorbidade,
    tipo_sintomas,
    atendimento_posto_ubs,
    atendimento_pronto_socorro_sus,
    atendimento_hospital_sus,
    atendimento_ambulatorio_privado,
    atendimento_pronto_socorro_privado,
    atendimento_hospital_privado,
    percentual_posto_ubs,
    percentual_pronto_socorro_sus,
    percentual_hospital_sus,
    percentual_ambulatorio_privado,
    percentual_pronto_socorro_privado,
    percentual_hospital_privado,
    total_pessoas
FROM
    resumo_servico_saude
ORDER BY
    total_pessoas DESC;

"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""**Análise dos resultados:**

**Maiores percentuais de atendimento em Postos/UBS:**

Amapá (13,1%): É o estado com maior percentual de pessoas com comorbidades e sintomas buscando atendimento em postos/UBS.
Santa Catarina (10,47%): Outro estado com alta proporção de atendimento nesse tipo de serviço.
Rio Grande do Sul (8,65%) e Tocantins (7,96%) também têm percentuais significativos.

**Estados com maior número absoluto de atendimentos em Postos/UBS:**

Minas Gerais (83 pessoas): Apresenta o maior número de pessoas buscando atendimento em postos/UBS.
Rio Grande do Sul (110 pessoas) e São Paulo (63 pessoas) seguem em volume absoluto, mas com percentuais mais baixos em relação ao total de atendimentos

**Atendimentos no setor privado:**

**Os estados com maior número de atendimentos em hospitais ou pronto-socorros privados são:**

São Paulo (396 pessoas).
Rio Grande do Sul (393 pessoas).
Minas Gerais (343 pessoas).


Isso indica que, em estados mais populosos, os serviços privados têm uma maior parcela dos atendimentos.
Estados com menor percentual de atendimento em Postos/UBS:

Maranhão (2,66%): É o estado com menor percentual de atendimento em postos/UBS para pessoas com comorbidades e sintomas.
Amazonas (2,62%) e Roraima (6,54%) também apresentam percentuais relativamente baixos, indicando uma menor dependência desse tipo de serviço ou menor cobertura.

**Observação de padrões:**


Estados menores ou menos populosos, como Amapá e Tocantins, apresentam maior dependência de postos/UBS para atendimento.
Estados mais populosos, como São Paulo, Minas Gerais e Rio Grande do Sul, têm maior número absoluto de atendimentos, mas seus percentuais em Postos/UBS são mais baixos, possivelmente devido à maior disponibilidade de serviços privados
"""

#M-Pessoas com comorbidades realizaram mais testes de COVID-19 em relação às que não possuem comorbidades?

query = """

WITH total_testes AS (
    SELECT
        CASE
            WHEN "Flag diabete" = 'Sim' OR
                 "Flag hipertensão" = 'Sim' OR
                 "Flag doenças respiratórias" = 'Sim' OR
                 "Flag doenças cardiovasculares" = 'Sim' OR
                 "Flag trastorno depressivo" = 'Sim' OR
                 "Flag doenças cancerigenas" = 'Sim'
            THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade,
        COUNT(*) AS total_moradores,
        SUM(CASE WHEN "Tipo do teste (cotonete)" = 'Sim' THEN 1 ELSE 0 END) AS total_teste_cotonete,
        SUM(CASE WHEN "Tipo do teste (sanguineo)" = 'Sim' THEN 1 ELSE 0 END) AS total_teste_sanguineo
    FROM
        base_covid
    GROUP BY
        tipo_comorbidade
)
SELECT
    tipo_comorbidade,
    total_moradores,
    total_teste_cotonete,
    total_teste_sanguineo,
    (total_teste_cotonete * 100.0 / total_moradores) AS percentual_teste_cotonete,
    (total_teste_sanguineo * 100.0 / total_moradores) AS percentual_teste_sanguineo
FROM
    total_testes;

"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""Pessoas com comorbidades realizaram mais testes sanguíneos (14,92%) em comparação às sem comorbidades (10,92%), enquanto a diferença para o teste de cotonete foi mínima (1,80% vs. 1,68%). Isso indica que pessoas com comorbidades são mais propensas a buscar monitoramento médico, possivelmente devido à maior preocupação ou orientação médica."""

#N- Entre aqueles que testaram positivo para COVID-19, qual é a frequência de comorbidades e sintomas?
query = """
-- CTE para filtrar os moradores que testaram positivo para COVID-19
WITH positivos AS (
    SELECT
        -- Resultado do teste
        "Flag resultado teste covid (cotonete)" AS resultado_teste_cotonete,
        "Flag resultado teste covid (sanguineo)" AS resultado_teste_sanguineo,

        -- Determina o status como 'Positivo' se qualquer um dos testes for positivo
        CASE
            WHEN "Flag resultado teste covid (cotonete)" = 'Positivo'
                 OR "Flag resultado teste covid (sanguineo)" = 'Positivo'
            THEN 'Positivo'
            ELSE 'Não Positivo'
        END AS status_teste,

        -- Flags de sintomas (febre, tosse, perda de sentidos)
        "Flag febre" AS febre,
        "Flag tosse" AS tosse,
        "Flag perda de sentidos" AS perda_de_sentidos,


        -- Identifica se o indivíduo possui comorbidades
        CASE
            WHEN "Flag diabete" = 'Sim' OR
                 "Flag hipertensão" = 'Sim' OR
                 "Flag doenças respiratórias" = 'Sim' OR
                 "Flag doenças cardiovasculares" = 'Sim'
            THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade
    FROM
        base_covid


    -- Filtra somente os moradores que testaram positivo em algum dos testes
    WHERE
        "Flag resultado teste covid (cotonete)" = 'Positivo'
        OR "Flag resultado teste covid (sanguineo)" = 'Positivo'
),

-- CTE para calcular a frequência dos sintomas por tipo de comorbidade
frequencia AS (
    SELECT
        tipo_comorbidade,  -- Tipo de comorbidade (Com Comorbidades ou Sem Comorbidades)
        -- Soma o total de pessoas com febre
        SUM(CASE WHEN febre = 'Sim' THEN 1 ELSE 0 END) AS total_febre,
        -- Soma o total de pessoas com tosse
        SUM(CASE WHEN tosse = 'Sim' THEN 1 ELSE 0 END) AS total_tosse,
        -- Soma o total de pessoas com perda de sentidos
        SUM(CASE WHEN perda_de_sentidos = 'Sim' THEN 1 ELSE 0 END) AS total_perda_de_sentidos,
        -- Conta o total de moradores positivos por tipo de comorbidade
        COUNT(*) AS total_positivos
    FROM
        positivos
    GROUP BY
        tipo_comorbidade -- Agrupa os resultados por tipo de comorbidade
)

-- Seleciona e apresenta os resultados finais
SELECT
    tipo_comorbidade,
    total_febre,
    -- Calcula o percentual de pessoas com febre em relação ao total de positivos
    ROUND(total_febre * 100.0 / total_positivos, 2) AS febre_percent,
    total_tosse,  -- Total de pessoas com tosse
    -- Calcula o percentual de pessoas com tosse em relação ao total de positivos
    ROUND(total_tosse * 100.0 / total_positivos, 2) AS tosse_percent,
    total_perda_de_sentidos,  -- Total de pessoas com perda de sentidos
    -- Calcula o percentual de pessoas com perda de sentidos em relação ao total de positivos
    ROUND(total_perda_de_sentidos * 100.0 / total_positivos, 2) AS perda_de_sentidos_percent,
    total_positivos  -- Total de pessoas que testaram positivo
FROM
    frequencia;



"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""**Conclusões:**

**Frequência Maior em Comorbidades:**

O grupo com comorbidades tem maior percentual de sintomas (febre, tosse e perda de sentidos) em relação ao total de positivos, quando comparado ao grupo sem comorbidades.
Por exemplo, 7.92% do grupo com comorbidades relatou tosse, enquanto apenas 4.92% do grupo sem comorbidades apresentou o mesmo sintoma.

**Frequência Absoluta Maior em Sem Comorbidades:**

Em termos absolutos, o grupo sem comorbidades possui um maior número de pessoas com sintomas, devido à quantidade significativamente maior de indivíduos nesse grupo (103.831 contra 20.347).

**Destaque:**

A diferença nos percentuais sugere que pessoas com comorbidades apresentam sintomas em proporções mais altas, o que pode indicar maior vulnerabilidade ou maior propensão a desenvolver sintomas graves ao contrair COVID-19.
"""

#O- Pessoas com comorbidades (ex.: diabetes, hipertensão) são mais propensas a buscar atendimento médico ao apresentar sintomas?


query = """
WITH moradores_atendimento AS (
    SELECT
        CASE
            WHEN "Ida ao serviço de saúde" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde SUS" = 'Sim' OR
                 "Optou por receber a visita de um profissional da saúde PARTICULAR" = 'Sim'
            THEN 'Buscou Atendimento'
            WHEN "optou por ficar em casa" = 'Sim' THEN 'Ficou em Casa'
            WHEN "Optou pela auto medicação" = 'Sim' THEN 'Auto-medicação'
            ELSE 'Outra Providência'
        END AS tipo_providencia, -- Classificação da providência tomada
        CASE
            WHEN "Flag diabete" = 'Sim' OR
                 "Flag hipertensão" = 'Sim' OR
                 "Flag doenças respiratórias" = 'Sim' OR
                 "Flag doenças cardiovasculares" = 'Sim'
            THEN 'Com Comorbidades'
            ELSE 'Sem Comorbidades'
        END AS tipo_comorbidade, -- Classificação por comorbidades
        COUNT(*) AS total_pessoas, -- Total de pessoas no grupo
        SUM(CASE WHEN "Local que buscou atendimento foi posto/UBS" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_posto_ubs,
        SUM(CASE WHEN "Local que buscou atendimento foi pronto socorro do SUS/UPA" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_pronto_socorro_sus,
        SUM(CASE WHEN "Local que buscou atendimento foi hospital do SUS" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_hospital_sus,
        SUM(CASE WHEN "Local que buscou atendimento foi ambulatório ou consultório privado " = 'Sim' THEN 1 ELSE 0 END) AS atendimento_ambulatorio_privado,
        SUM(CASE WHEN "Local que buscou atendimento foi pronto socorro privado" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_pronto_socorro_privado,
        SUM(CASE WHEN "Local que buscou atendimento foi hospital privado" = 'Sim' THEN 1 ELSE 0 END) AS atendimento_hospital_privado,
        SUM(CASE WHEN "Flag internação" = 'Sim' THEN 1 ELSE 0 END) AS total_internacoes
    FROM
        base_covid
    WHERE
        "Flag febre" = 'Sim' OR
        "Flag tosse" = 'Sim' OR
        "Flag perda de sentidos" = 'Sim' -- Filtra apenas pessoas com sintomas
    GROUP BY
        tipo_providencia, tipo_comorbidade
)
SELECT
    tipo_comorbidade,
    tipo_providencia,
    total_pessoas,
    atendimento_posto_ubs,
    atendimento_pronto_socorro_sus,
    atendimento_hospital_sus,
    atendimento_ambulatorio_privado,
    atendimento_pronto_socorro_privado,
    atendimento_hospital_privado,
    total_internacoes,
    ROUND(total_pessoas * 100.0 / SUM(total_pessoas) OVER (PARTITION BY tipo_comorbidade), 2) AS percentual_providencia,
    ROUND(total_internacoes * 100.0 / total_pessoas, 2) AS percentual_internacoes -- Percentual de internações
FROM
    moradores_atendimento
ORDER BY
    tipo_comorbidade, tipo_providencia DESC;

"""
result = pd.read_sql_query(query, conn)

# Exibir o resultado
display(result)

"""**Conclusões**

Busca por atendimento: É mais comum para pessoas sem comorbidades, mas a diferença não é tão acentuada.

Taxa de internações: Pessoas com comorbidades que optaram por "Outra Providência" ou "Ficou em Casa" têm uma menor taxa de internações do que aquelas sem comorbidades.

Relação com comorbidades: A presença de comorbidades não necessariamente implica uma maior taxa de internação, mas pode influenciar o tipo de providência tomada.
"""